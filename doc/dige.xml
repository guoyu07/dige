<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "/usr/share/xml/docbook/xml-dtd-4.5/docbookx.dtd">
<article id="dige" last-revision="$Date: 2010/10/03 19:27:41 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Dige 0.1</title>
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Matthieu</firstname> <surname>Garrigues</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2010-2011</year> <holder>Matthieu Garrigues</holder> firstname.lastname@gmail.com
    </copyright>
    <legalnotice>
      <para>
        Distributed under the LGPL License, Version 3.0.
      </para>
    </legalnotice>
  </articleinfo>

  <section id="dige.intro">
    <title>Introduction</title>
    <para>
      Dige is a C++ toolbox designed for visual and interactive
      debugging. It allows basic interactions with a graphical user
      interface with only few C++ statement:

    <programlisting language="cpp">
      <![CDATA[
  // GUI definition and creation.
  Window("simple_image example", 500, 300) <<= ImageView("view");

  my_rgb_image_type my_image;
  for_each_event(e, key_release())
  {
    // [...Process my_image...]

    // Display result
    ImageView("view") <<= dl() - my_image;
  }
]]>
   </programlisting>

      This library is built on top of the Qt framework.
      It is licensed under LGPL.
    </para>
  </section>

  <section id="dige.deps">
    <title>Dependencies</title>
    <para>
      <itemizedlist>
        <listitem>Qt4 <ulink url="http://qt.nokia.com"/></listitem>
        <listitem>FFMPEG <ulink url="http://www.ffmpeg.org"/></listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.envs">
    <title>Tested environments</title>
    <para>
      <itemizedlist>
        <listitem>Linux (Archlinux) / g++-4.6.1</listitem>
        <listitem>Windows7 / visual studio 2008</listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.features">
    <title>Features</title>
    <para>
      <itemizedlist>
        <listitem>GUI definition</listitem>
        <listitem>Event handling</listitem>
        <listitem>Image display (Pan-zoom, color picker)</listitem>
        <listitem>Scalar display</listitem>
        <listitem>Video encoding</listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.install">
    <title>Compilation and Installation</title>
    <para>
      <programlisting>
git clone git://github.com/matt-42/dige.git
cd dige
mkdir build
cd build
INSTALL_PREFIX=$fixme$ cmake .. [ -DWITH_RECORDING:bool=ON ]
make
(sudo) make install
      </programlisting>
      Use <code>INSTALL_PREFIX</code> to install the library in an other place
      than the default one.
      <code>-DWITH_RECORDING:bool=ON</code> enable video recording. Need FFmpeg.
    </para>
  </section>


  <section id="dige.tutorial">
    <title>Getting started</title>

<para>
The following example shows how to use dige to display a
simple user defined <code>rgb_image</code> image type.
</para>

    <programlisting language="cpp">
      <![CDATA[
#include <cstdlib>
#include <ctime>

// Dige include.
#include <dige/dige.h>
]]>
    </programlisting>


<para>
We define here our simple 2d image type that will be displayed by dige.
</para>

    <programlisting language="cpp">
      <![CDATA[

// A simple rgb image type
struct rgb_image
{
  rgb_image(unsigned w, unsigned h)
    : width(w),
      height(h),
      image_size(w * h * 3)
  {
    data = new unsigned char[image_size];
  }

  ~rgb_image()
  {
    delete data;
  }

  unsigned width;
  unsigned height;
  unsigned image_size;
  unsigned char* data;
};
]]>
    </programlisting>

<para>
  We then define the bridge between our custom rgb_image type and the
  internal dg::image type. <emphasis>Only types that represent pixels continiously in a row-major order are compatible</emphasis>. This will be called before displaying each
  <code>rgb_image</code>. <code>dg::image</code> takes two template parameters:

  <orderedlist>
  <listitem>The format of the pixels. Must be <code>trait::format::rgb</code>, <code>trait::format::rgba</code>, or <code>trait::format::luminance</code>.
  </listitem>

  <listitem>The data type. Must be <code>float, char, short, int,
      unsigned float, unsigned char, unsigned short</code> or <code>unsigned int</code>.</listitem>
  </orderedlist>

</para>

    <programlisting language="cpp">
      <![CDATA[
namespace dg
{
  image<trait::format::rgb, unsigned char>
  adapt(const ::rgb_image& i)
  {
    return image<trait::format::rgb, unsigned char>
      (i.width, i.height, i.data);
    // Warning: dg::image only handles contiguous buffers of pixel.
  }
}
]]>
    </programlisting>

    <para>
      We overload here the function <code>dg::adapt</code> that will
      be called internally by dige to convert instances
      of <code>rgb_image</code>. Once we made the adaptor, instances
      of <code>rgb_image</code> can be directly passed to dige operators.
    </para>

    <programlisting language="cpp">
      <![CDATA[
int main()
{
  namespace dw = dg::widgets;
  namespace de = dg::event;
  using dg::dl; // image list starter.

  srand(time(0));
  rgb_image img(20, 20);

  // Create a window containing an ImageView named "random" that will
  // display our rgb_image.
  dg::Window("simple_image example", 500, 300) <<= dw::ImageView("random");

  unsigned t = clock();
  // Each iteration generates a random image and display it in
  // dw::ImageView("random")
  while (clock() - t < 2 * CLOCKS_PER_SEC)
  {
    for (unsigned i = 0; i < img.image_size; i++)
      img.data[i] = rand();

    // Display img 3 times in the ImageView. 
    // dl() starts a list of images.
    dw::ImageView("random")  <<= dl() - img - img + img;
  }

  // Wait for any key press event.
  de::wait_event(de::key_press());
}
]]>
   </programlisting>

   <para>
     In this program, with only one c++ statement, we displayed 3 copy of our
     randomly filled image in a window named "random" (see screeshot below).
     <itemizedlist>
       <listitem>
         <code>dl()</code> tells
         the compiler that we start a list of images.
       </listitem>
       <listitem>
         <code>operator-</code> places the images from left to right.
       </listitem>
       <listitem>
         <code>operator+</code> places the next image on the beginning of the
         next line, behind the current one.
       </listitem>
       <listitem>
         <code>ImageView("random", 300, 200)</code> refer to the image view
         "random".
       </listitem>
       <listitem>
         Finally, <code><![CDATA[operator<<=]]></code> tells "random" to draw
         our newly created image list.
       </listitem>
     </itemizedlist>
     <figure>
       <title>Random screenshot</title> <graphic fileref="images/dige_random_example.jpeg"></graphic>
     </figure>
   </para>

  </section>

  <section id="dige.links">
    <title>Links</title>
    <para>
     <itemizedlist>
       <listitem>
         <ulink url="https://github.com/matt-42/dige">Dige on Github</ulink>
       </listitem>
       <listitem>
         <ulink url="http://www.ohloh.net/p/dige">Dige on Ohloh</ulink>
       </listitem>
     </itemizedlist>
    </para>
  </section>

</article>
