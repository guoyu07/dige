<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "/usr/share/xml/docbook/xml-dtd-4.5/docbookx.dtd">
<article id="dige" last-revision="$Date: 2010/10/03 19:27:41 $" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Dige 0.1</title>
  <articleinfo>
    <authorgroup>
    <author>
      <firstname>Matthieu</firstname> <surname>Garrigues</surname>
    </author>
    </authorgroup>
    <copyright>
      <year>2010-2011</year> <holder>Matthieu Garrigues</holder> firstname.lastname@gmail.com
    </copyright>
    <legalnotice>
      <para>
        Distributed under the LGPL License, Version 3.0.
      </para>
    </legalnotice>
  </articleinfo>

  <section id="dige.intro">
    <title>Introduction</title>
    <para>
      Dige is a C++ toolbox designed for visual and interactive
      debugging. It allows basic interactions with a graphical user
      interface with only few C++ statement:

    <programlisting language="cpp">
      <![CDATA[
  // GUI definition and creation.
  Window("simple_image example", 500, 300) <<= ImageView("view");

  my_rgb_image_type my_image;
  for_each_event(e, key_release())
  {
    // [...Process my_image...]

    // Display result
    ImageView("view") << my_image << show;
  }
]]>
   </programlisting>

   Video captures is also easy:
    <programlisting language="cpp">
      <![CDATA[
     // Recording "view" content.
     record("my_video.avi") <<= ImageView("view") << my_image << show;
  }
]]>
   </programlisting>

   This library is designed for helping image processing development,
   but can be usefull in many other case, when users only need basic
   features and do not want to learn how to use a real world UI
   framework.

   It is built on top of the Qt framework and is licensed under LGPL.

    </para>
  </section>

  <section id="dige.deps">
    <title>Dependencies</title>
    <para>
      <itemizedlist>
        <listitem>Qt4 <ulink url="http://qt.nokia.com"/></listitem>
        <listitem>FFMPEG <ulink url="http://www.ffmpeg.org"/></listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.envs">
    <title>Tested environments</title>
    <para>
      <itemizedlist>
        <listitem>Linux (Archlinux) / g++-4.6.1</listitem>
        <listitem>Windows7 / visual studio 2008</listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.features">
    <title>Features</title>
    <para>
      <itemizedlist>
        <listitem>GUI definition</listitem>
        <listitem>Event handling</listitem>
        <listitem>Image display (Pan-zoom, color picker)</listitem>
        <listitem>Scalar display</listitem>
        <listitem>Video encoding</listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="dige.install">
    <title>Compilation and Installation</title>
    <para>
      <programlisting>
git clone git://github.com/matt-42/dige.git
cd dige
mkdir build
cd build
INSTALL_PREFIX=$fixme$ cmake .. [ -DWITH_RECORDING:bool=ON ]
make
(sudo) make install
      </programlisting>
      Use <code>INSTALL_PREFIX</code> to install the library in an other place
      than the default one.
      <code>-DWITH_RECORDING:bool=ON</code> enable video recording. Need FFmpeg.
    </para>
  </section>


  <section id="dige.tutorial">
    <title>Getting started</title>

<para>
The following example shows how to use dige to display a
simple user defined <code>rgb_image</code> image type.
</para>

    <programlisting language="cpp">
      <![CDATA[
#include <cstdlib>
#include <ctime>

// Dige include.
#include <dige/dige.h>
]]>
    </programlisting>


<para>
We define here our simple 2d image type that will be displayed by dige.
</para>

    <programlisting language="cpp">
      <![CDATA[

// A simple rgb image type
struct rgb_image
{
  rgb_image(unsigned w, unsigned h)
    : width(w),
      height(h),
      image_size(w * h * 3)
  {
    data = new unsigned char[image_size];
  }

  ~rgb_image()
  {
    delete data;
  }

  unsigned width;
  unsigned height;
  unsigned image_size;
  unsigned char* data;
};
]]>
    </programlisting>

<para>
  We then define the bridge between our custom rgb_image type and the
  internal dg::image type. <emphasis>Only types that represent pixels continiously in a row-major order are compatible</emphasis>. This will be called before displaying each
  <code>rgb_image</code>. <code>dg::image</code> takes two template parameters:

  <orderedlist>
  <listitem>The format of the pixels. Must be <code>trait::format::rgb</code>, <code>trait::format::rgba</code>, or <code>trait::format::luminance</code>.
  </listitem>

  <listitem>The data type. Must be <code>float, char, short, int,
      unsigned float, unsigned char, unsigned short</code> or <code>unsigned int</code>.</listitem>
  </orderedlist>

</para>

    <programlisting language="cpp">
      <![CDATA[
namespace dg
{
  image<trait::format::rgb, unsigned char>
  adapt(const ::rgb_image& i)
  {
    return image<trait::format::rgb, unsigned char>
      (i.width, i.height, i.data);
    // Warning: dg::image only handles contiguous buffers of pixel.
  }
}
]]>
    </programlisting>

    <para>
      We overload here the function <code>dg::adapt</code> that will
      be called internally by dige to convert instances
      of <code>rgb_image</code>. Once we made the adaptor, instances
      of <code>rgb_image</code> can be directly passed to dige operators.
    </para>

    <programlisting language="cpp">
      <![CDATA[
int main()
{
  namespace dw = dg::widgets;
  namespace de = dg::event;

  srand(time(0));
  rgb_image img(20, 20);

  // Create a window containing an ImageView named "random" that will
  // display our rgb_image.
  dg::Window("simple_image example", 500, 300) <<= dw::ImageView("random");

  unsigned t = clock();
  // Each iteration generates a random image and display it in
  // dw::ImageView("random")
  while (clock() - t < 2 * CLOCKS_PER_SEC)
  {
    for (unsigned i = 0; i < img.image_size; i++)
      img.data[i] = rand();

    // Display img 3 times in the ImageView. 
    dw::ImageView("random")  << img << img << newline << img << show;
  }

  // Wait for any key press event.
  de::wait_event(de::key_press());
}
]]>
   </programlisting>

   <para>
     In this program, with only one c++ statement, we displayed 3 copy of our
     randomly filled image in a window named "random" (see screeshot below).
     <itemizedlist>
       <listitem>
         <code>dl()</code> tells
         the compiler that we start a list of images.
       </listitem>
       <listitem>
         <code>operator-</code> places the images from left to right.
       </listitem>
       <listitem>
         <code>operator+</code> places the next image on the beginning of the
         next line, behind the current one.
       </listitem>
       <listitem>
         <code>ImageView("random", 300, 200)</code> refer to the image view
         "random".
       </listitem>
       <listitem>
         Finally, <code><![CDATA[operator<<=]]></code> tells "random" to draw
         our newly created image list.
       </listitem>
     </itemizedlist>
     <figure>
       <title>Random screenshot</title> <graphic fileref="images/dige_random_example.jpeg"></graphic>
     </figure>
   </para>

  </section>

  <section id="dige.complex_ui">
    <title>GUI creation</title>

    <programlisting language="cpp">
      <![CDATA[
  namespace dw = dg::widgets;
  namespace de = dg::event;

  // Stand alone window named "testalone" that contains one image view.
  dw::ImageView("testalone");

  // Two vertically aligned image views in one window named "dige demo".
  dg::Window("dige demo", 300, 300) <<=
    dg::vbox_start <<
    dw::ImageView("test1") <<
    dw::ImageView("test2") <<
    dg::vbox_end;

  // Two horizontally aligned image views in one window named "dige demo".
  // test1 will be twice larger than test2
  dg::Window("proportions", 300, 300) <<=
    dg::hbox_start <<
    dw::ImageView("test3") % 2 <<  // Use operator % to set proportions of widget.
    dw::ImageView("test4") % 1 <<
    dg::hbox_end;

  // image view size can be fixed.
  dg::Window("Fixed size", 300, 300) <<=
    dg::vbox_start <<
    dw::ImageView("test5", 100, 20) << // Fixed size image view
    dw::ImageView("test6") << // Dynamically sized image view that expands to fill the window.
    dg::vbox_end;

  // Box layouts can be nested.
  dg::Window("Nested layouts", 300, 300) <<=

    dg::hbox_start << // Main horizontal layout.

    (  dg::vbox_start << // First vertical sub layout.
       dw::Label("label7") <<
       dw::ImageView("test7") <<
       dg::vbox_end) <<

    (  dg::vbox_start << // Second vertical sub layout.
       dw::Label("label8") <<
       dw::ImageView("test8") <<
       dg::vbox_end) <<

    dg::hbox_end;

      ]]>
   </programlisting>

  </section>

  <section id="dige.events">
    <title>Event management</title>

    <programlisting language="cpp">
      <![CDATA[
  namespace de = dg::event;
  namespace dw = dg::widgets;

  // In order to listen to events, at least one window must be created.
  dg::Window("Event demo", 100, 100) <<=
    dg::vbox_start <<
    dw::ImageView("view") <<
    dw::PushButton("button", true) << // Checkable push button
    dg::vbox_end;

  // Block until the user release any key
  std::cout << "Press any key" << std::endl;
  de::wait_event(de::key_release());


  // Sleep until the user release key a OR key d. Events can be combined
  // with operator|
  std::cout << "Press key a or b" << std::endl;
  de::wait_event(de::key_release(de::key_a) | de::key_release(de::key_b));

  // Event based for loop.
  // Iterate after each mouse movement or release of key d until
  // escape has been released.
  // Passively wait for events between iterations.
  std::cout << "Move mouse or press d, escape to go to next step" 
            << std::endl;
  for_each_event_until(e, de::mouse_move() | de::key_release(de::key_d),
                          de::key_release(de::key_escape))
  {
    if (e == de::mouse_move())
      std::cout << "mouse move" << std::endl;
    else if (e == de::key_release(de::key_d))
      std::cout << "key d release" << std::endl;
  }

  // Non blocking event managment.
  de::event_queue q(dw::PushButton("button").click() | de::key_release(de::key_a));
  de::event_queue q_esc(de::key_release(de::key_escape));

  std::cout << "Click button or press a, escape to quit" << std::endl;
  while (q_esc.is_empty())
  {
    if (!q.is_empty())
    {
      de::any_event e = q.pop_front();
      if (e == dw::PushButton("button").click())
        std::cout << "button click" << std::endl;
      if (e == de::key_release(de::key_a))
        std::cout << "key a release" << std::endl;
    }
  }
      ]]>
   </programlisting>

  </section>

  <section id="dige.links">
    <title>Links</title>
    <para>
     <itemizedlist>
       <listitem>
         <ulink url="https://github.com/matt-42/dige">Dige on Github</ulink>
       </listitem>
       <listitem>
         <ulink url="http://www.ohloh.net/p/dige">Dige on Ohloh</ulink>
       </listitem>
     </itemizedlist>
    </para>
  </section>

</article>
